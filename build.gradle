/*
 * This build file was auto generated by running the Gradle 'init' task
 * by '' at '4/4/16 4:24 PM' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */
 
 buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.4'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
    }
}


// Apply the java plugin to add support for Java
apply plugin : 'java'
apply plugin : 'war'
apply plugin : 'eclipse-wtp'
apply plugin: 'com.bmuschko.tomcat-base'
apply plugin: 'nebula.provided-base'

ext {
    tomcatStopPort = 8081
    tomcatStopKey = 'stopKey'
    
    
}

task integrationTomcatRun(type: com.bmuschko.gradle.tomcat.tasks.TomcatRun) {
    stopPort = tomcatStopPort
    stopKey = tomcatStopKey
    daemon = true
    outputFile = file("logs/tomcat.log")
    
    
}
task integrationTomcatStop(type: com.bmuschko.gradle.tomcat.tasks.TomcatStop) {
    stopPort = tomcatStopPort
    stopKey = tomcatStopKey
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
    compile "com.google.code.gson:gson:2.4"
	compile "org.mongodb:mongo-java-driver:2.8.0"
	compile "com.google.collections:google-collections:1.0"
	compile "org.apache.commons:commons-lang3:3.4"
	compile "commons-lang:commons-lang:2.6"
	compile "org.json:json:20090211"
	compile "com.lowagie:itext:2.0.8"
	compile "org.jopendocument:jOpenDocument:1.3b1"
	compile "javax.mail:mail:1.5.0-b01"
	compile "org.apache.pdfbox:pdfbox-app:1.7.1"
	compile "org.apache.logging.log4j:log4j-api:2.5"
	compile "org.apache.logging.log4j:log4j-core:2.5"
	
	compile "junit:junit:4.12"
	compile "org.mockito:mockito-core:1.10.19"
	compile "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.6.0"
	compile "com.github.fge:json-schema-validator:2.2.6"
	
	
	compile "com.google.guava:guava:12.0.1"
	compile "org.directwebremoting:dwr:2.0.8"
	providedCompile "javax.servlet:javax.servlet-api:3.1.0"
	providedCompile "javax.servlet:jsp-api:2.0"
	compile "javax.persistence:persistence-api:1.0-rev-1"

	compile 'com.github.kenglxn.QRGen:javase:2.1.0'
	
	compile files('./src/main/webapp/WEB-INF/lib/rhinoOneJar.jar')
	//compile fileTree(dir: "./src/mai/webapp/WEB-INF/lib", include: '*.jar')
	
	//compile files('./src/main/webapp/WEB-INF/lib/rhinoOne.jar')
	compile "mx.bigdata.cfdi:cfdi-base:0.2.5"
	
	//compile "org.apache.axis2:axis2:1.6.2"
	
	compile "org.apache.axis:axis:1.4"
	compile "javax.xml:jaxrpc-api:1.1"
	// jsoup HTML parser library @ http://jsoup.org/
	compile 'org.jsoup:jsoup:1.9.2'
	
	def tomcatVersion = '7.0.59'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
           
}
